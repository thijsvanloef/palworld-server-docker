---
name: Release
on:  # yamllint disable-line rule:truthy
  release:
    types: [published]

env:
  TMP_LOCAL_IMAGE: localhost:5000/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          mkdir -p /tmp/images
          platform=linux/${{ matrix.platform }}
          echo "TARFILE=${platform//\//-}.tar" >> $GITHUB_ENV
          echo "TAG=${{ env.TMP_LOCAL_IMAGE }}:${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.${{ matrix.platform }}
          platforms: linux/${{ matrix.platform }}
          tags: ${{ env.TAG }}
          outputs: type=docker,dest=/tmp/images/${{ env.TARFILE }}

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: images
          path: /tmp/images/${{ env.TARFILE }}
          if-no-files-found: error
          retention-days: 1
  release:
    runs-on: ubuntu-latest
    needs:
      - build
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Download images
        uses: actions/download-artifact@v4
        with:
          name: images
          path: /tmp/images

      - name: Load images
        run: |
          for image in /tmp/images/*.tar; do
            docker load -i $image
          done

      - name: Push images to local registry
        run: |
          docker push -a ${{ env.TMP_LOCAL_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker - Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest
          flavor: latest=true

      - name: Create manifest list and push
        run: |
          docker buildx imagetools create -t ${{ steps.meta.outputs.tags }} \
            $(docker image ls --format '{{.Repository}}:{{.Tag}}' '${{ env.TMP_LOCAL_IMAGE }}' | tr '\n' ' ')
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ steps.meta.outputs.tags }}

  # Generates a new release specifically for the helm chart, using the helm charts version
  # Only generates a new release if the helm charts version has changed since the last release
  # Will then update the gh-pages branch & helm repository
  release-helm:
    name: Release - Helm chart
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git - Configure
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      # Will push updates to a index.yaml file in the gh-pages branch
      - name: Helm - chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: charts
          pages_branch: gh-pages
          mark_as_latest: false
          skip_existing: true
          config: ./charts/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
